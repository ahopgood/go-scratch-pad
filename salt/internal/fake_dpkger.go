// Code generated by counterfeiter. DO NOT EDIT.
package internal

import (
	"com/alexander/scratch/salt/commands"
	"sync"
)

type FakeDpkg struct {
	IdentifyDependenciesStub        func(string) []string
	identifyDependenciesMutex       sync.RWMutex
	identifyDependenciesArgsForCall []struct {
		arg1 string
	}
	identifyDependenciesReturns struct {
		result1 []string
	}
	identifyDependenciesReturnsOnCall map[int]struct {
		result1 []string
	}
	ParseDependenciesStub        func(string) []string
	parseDependenciesMutex       sync.RWMutex
	parseDependenciesArgsForCall []struct {
		arg1 string
	}
	parseDependenciesReturns struct {
		result1 []string
	}
	parseDependenciesReturnsOnCall map[int]struct {
		result1 []string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDpkg) IdentifyDependencies(arg1 string) []string {
	fake.identifyDependenciesMutex.Lock()
	ret, specificReturn := fake.identifyDependenciesReturnsOnCall[len(fake.identifyDependenciesArgsForCall)]
	fake.identifyDependenciesArgsForCall = append(fake.identifyDependenciesArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.IdentifyDependenciesStub
	fakeReturns := fake.identifyDependenciesReturns
	fake.recordInvocation("IdentifyDependencies", []interface{}{arg1})
	fake.identifyDependenciesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeDpkg) IdentifyDependenciesCallCount() int {
	fake.identifyDependenciesMutex.RLock()
	defer fake.identifyDependenciesMutex.RUnlock()
	return len(fake.identifyDependenciesArgsForCall)
}

func (fake *FakeDpkg) IdentifyDependenciesCalls(stub func(string) []string) {
	fake.identifyDependenciesMutex.Lock()
	defer fake.identifyDependenciesMutex.Unlock()
	fake.IdentifyDependenciesStub = stub
}

func (fake *FakeDpkg) IdentifyDependenciesArgsForCall(i int) string {
	fake.identifyDependenciesMutex.RLock()
	defer fake.identifyDependenciesMutex.RUnlock()
	argsForCall := fake.identifyDependenciesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeDpkg) IdentifyDependenciesReturns(result1 []string) {
	fake.identifyDependenciesMutex.Lock()
	defer fake.identifyDependenciesMutex.Unlock()
	fake.IdentifyDependenciesStub = nil
	fake.identifyDependenciesReturns = struct {
		result1 []string
	}{result1}
}

func (fake *FakeDpkg) IdentifyDependenciesReturnsOnCall(i int, result1 []string) {
	fake.identifyDependenciesMutex.Lock()
	defer fake.identifyDependenciesMutex.Unlock()
	fake.IdentifyDependenciesStub = nil
	if fake.identifyDependenciesReturnsOnCall == nil {
		fake.identifyDependenciesReturnsOnCall = make(map[int]struct {
			result1 []string
		})
	}
	fake.identifyDependenciesReturnsOnCall[i] = struct {
		result1 []string
	}{result1}
}

func (fake *FakeDpkg) ParseDependencies(arg1 string) []string {
	fake.parseDependenciesMutex.Lock()
	ret, specificReturn := fake.parseDependenciesReturnsOnCall[len(fake.parseDependenciesArgsForCall)]
	fake.parseDependenciesArgsForCall = append(fake.parseDependenciesArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.ParseDependenciesStub
	fakeReturns := fake.parseDependenciesReturns
	fake.recordInvocation("ParseDependencies", []interface{}{arg1})
	fake.parseDependenciesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeDpkg) ParseDependenciesCallCount() int {
	fake.parseDependenciesMutex.RLock()
	defer fake.parseDependenciesMutex.RUnlock()
	return len(fake.parseDependenciesArgsForCall)
}

func (fake *FakeDpkg) ParseDependenciesCalls(stub func(string) []string) {
	fake.parseDependenciesMutex.Lock()
	defer fake.parseDependenciesMutex.Unlock()
	fake.ParseDependenciesStub = stub
}

func (fake *FakeDpkg) ParseDependenciesArgsForCall(i int) string {
	fake.parseDependenciesMutex.RLock()
	defer fake.parseDependenciesMutex.RUnlock()
	argsForCall := fake.parseDependenciesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeDpkg) ParseDependenciesReturns(result1 []string) {
	fake.parseDependenciesMutex.Lock()
	defer fake.parseDependenciesMutex.Unlock()
	fake.ParseDependenciesStub = nil
	fake.parseDependenciesReturns = struct {
		result1 []string
	}{result1}
}

func (fake *FakeDpkg) ParseDependenciesReturnsOnCall(i int, result1 []string) {
	fake.parseDependenciesMutex.Lock()
	defer fake.parseDependenciesMutex.Unlock()
	fake.ParseDependenciesStub = nil
	if fake.parseDependenciesReturnsOnCall == nil {
		fake.parseDependenciesReturnsOnCall = make(map[int]struct {
			result1 []string
		})
	}
	fake.parseDependenciesReturnsOnCall[i] = struct {
		result1 []string
	}{result1}
}

func (fake *FakeDpkg) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.identifyDependenciesMutex.RLock()
	defer fake.identifyDependenciesMutex.RUnlock()
	fake.parseDependenciesMutex.RLock()
	defer fake.parseDependenciesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeDpkg) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ commands.Dpkg = new(FakeDpkg)
