// Code generated by counterfeiter. DO NOT EDIT.
package internal

import (
	"com/alexander/scratch/salt/commands"
	"sync"
)

type FakeApt struct {
	DownloadPackageStub        func(string) (string, int, error)
	downloadPackageMutex       sync.RWMutex
	downloadPackageArgsForCall []struct {
		arg1 string
	}
	downloadPackageReturns struct {
		result1 string
		result2 int
		result3 error
	}
	downloadPackageReturnsOnCall map[int]struct {
		result1 string
		result2 int
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeApt) DownloadPackage(arg1 string) (string, int, error) {
	fake.downloadPackageMutex.Lock()
	ret, specificReturn := fake.downloadPackageReturnsOnCall[len(fake.downloadPackageArgsForCall)]
	fake.downloadPackageArgsForCall = append(fake.downloadPackageArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.DownloadPackageStub
	fakeReturns := fake.downloadPackageReturns
	fake.recordInvocation("DownloadPackage", []interface{}{arg1})
	fake.downloadPackageMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeApt) DownloadPackageCallCount() int {
	fake.downloadPackageMutex.RLock()
	defer fake.downloadPackageMutex.RUnlock()
	return len(fake.downloadPackageArgsForCall)
}

func (fake *FakeApt) DownloadPackageCalls(stub func(string) (string, int, error)) {
	fake.downloadPackageMutex.Lock()
	defer fake.downloadPackageMutex.Unlock()
	fake.DownloadPackageStub = stub
}

func (fake *FakeApt) DownloadPackageArgsForCall(i int) string {
	fake.downloadPackageMutex.RLock()
	defer fake.downloadPackageMutex.RUnlock()
	argsForCall := fake.downloadPackageArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeApt) DownloadPackageReturns(result1 string, result2 int, result3 error) {
	fake.downloadPackageMutex.Lock()
	defer fake.downloadPackageMutex.Unlock()
	fake.DownloadPackageStub = nil
	fake.downloadPackageReturns = struct {
		result1 string
		result2 int
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeApt) DownloadPackageReturnsOnCall(i int, result1 string, result2 int, result3 error) {
	fake.downloadPackageMutex.Lock()
	defer fake.downloadPackageMutex.Unlock()
	fake.DownloadPackageStub = nil
	if fake.downloadPackageReturnsOnCall == nil {
		fake.downloadPackageReturnsOnCall = make(map[int]struct {
			result1 string
			result2 int
			result3 error
		})
	}
	fake.downloadPackageReturnsOnCall[i] = struct {
		result1 string
		result2 int
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeApt) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.downloadPackageMutex.RLock()
	defer fake.downloadPackageMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeApt) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ commands.Apt = new(FakeApt)
